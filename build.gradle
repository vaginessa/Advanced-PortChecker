import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'org.beryx.jlink' version '2.26.0'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

def currentOS = DefaultNativePlatform.currentOperatingSystem

group = 'com.codedead'
version = '1.0-SNAPSHOT'

application {
    mainModule = 'AdvancedPortChecker'
    mainClass = 'com.codedead.advanced.portchecker.AdvancedPortCheckerApplication'
}

java {
    sourceCompatibility = JavaVersion.VERSION_20
    targetCompatibility = JavaVersion.VERSION_20
}

javafx {
    version = '20'
    configuration = 'implementation'
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.media']
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    forceMerge('log4j-api', 'jackson')
    launcher {
        name = 'AdvancedPortChecker'
    }

    mergedModule {
        additive = true
        uses 'org.apache.logging.log4j.util.PropertySource'
        uses 'org.apache.logging.log4j.core.util.ContextDataProvider'
        uses 'org.apache.logging.log4j.core.util.WatchEventService'
        uses 'org.apache.logging.log4j.spi.Provider'
        uses 'org.apache.logging.log4j.message.ThreadDumpMessage.ThreadInfoFactory'
    }

    if (currentOS.isWindows()) {
        jpackage {
            installerType = 'msi'
            icon = "${project.rootDir}/.msi/AdvancedPortChecker.ico"
            installerOptions = [
                    '--win-menu',
                    '--win-menu-group', 'CodeDead',
                    '--win-shortcut',
                    '--win-dir-chooser',
                    '--copyright', 'Copyright (c) 2023 CodeDead',
                    '--description', 'Advanced PortChecker is a free and open-source application that can be used to check if a range of ports are open on a specific host',
                    '--vendor', 'CodeDead',
                    '--license-file', 'LICENSE'
            ]
        }
    } else if (currentOS.isLinux()) {
        jpackage {
            installerType = 'rpm'
            icon = "${project.rootDir}/src/main/resources/images/AdvancedPortChecker.png"
            installerOptions = [
                    '--linux-shortcut',
                    '--linux-package-name', 'advanced-portchecker-codedead',
                    '--linux-rpm-license-type', 'GPLv3',
                    '--copyright', 'Copyright (c) 2023 CodeDead',
                    '--description', 'Advanced PortChecker is a free and open-source application that can be used to check if a range of ports are open on a specific host',
                    '--vendor', 'CodeDead',
                    '--license-file', 'LICENSE'
            ]
        }
    }
}

tasks.register('AppImage') {
    dependsOn jpackageImage
    doLast {
        copy {
            from '.AppImage/.AppDir'
            into "${buildDir}/AppImage/AdvancedPortChecker.AppDir"
        }
        copy {
            from "${buildDir}/jpackage/AdvancedPortChecker/"
            into "${buildDir}/AppImage/AdvancedPortChecker.AppDir/usr/"
        }
        copy {
            from '.AppImage/.AppDir/AdvancedPortChecker.png'
            into "${buildDir}/AppImage/AdvancedPortChecker.AppDir/usr/lib"
        }
        exec {
            commandLine 'sh', "${project.rootDir}/.AppImage/createAppImage.sh", "${project.version.toString()}"
        }
        delete "${buildDir}/AppImage/AdvancedPortChecker.AppDir"
    }
}

configure(AppImage) {
    group = 'build'
    description = 'Create an AppImage after creating the image of the application'
}

clean.doFirst {
    delete 'default.properties'
    delete 'license.pdf'
    delete 'help.pdf'
    delete 'logs'
    delete '.advancedportchecker'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'io.github.mkpaz:atlantafx-base:1.2.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.github.seancfoley:ipaddress:5.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()
}
